#!/usr/bin/env python3
"""
AICODE-NOTE: –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ file_id –æ—Ç Bot API –≤ Telethon
"""

import asyncio
from pathlib import Path
from telegram_bot import BotFileIdConverter

async def example_usage():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ file_id
    """
    print("üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ file_id...")
    
    # –ü—Ä–∏–º–µ—Ä file_id –æ—Ç Bot API (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    bot_file_id = "BAADBAADrwADBREAAYag8mVBjQABAg"
    
    print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π Bot API file_id: {bot_file_id}")
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º file_id
    print("\nüîç –ê–Ω–∞–ª–∏–∑ file_id:")
    analysis = BotFileIdConverter.analyze_bot_file_id(bot_file_id)
    
    if analysis['is_valid']:
        print(f"‚úÖ File ID –≤–∞–ª–∏–¥–µ–Ω:")
        print(f"   –¢–∏–ø —Ñ–∞–π–ª–∞: {analysis['file_type_name']}")
        print(f"   DC ID: {analysis['dc_id']}")
        print(f"   Access Hash: {analysis['access_hash']}")
        print(f"   –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {analysis['raw_length']} –±–∞–π—Ç")
        
        # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Telethon location
        print("\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Telethon location:")
        try:
            location = BotFileIdConverter.convert_to_telethon_location(bot_file_id)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {type(location).__name__}")
            print(f"   ID: {location.id}")
            print(f"   Access Hash: {location.access_hash}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
    else:
        print(f"‚ùå File ID –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {analysis['error']}")

if __name__ == "__main__":
    asyncio.run(example_usage())