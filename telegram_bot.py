#!/usr/bin/env python3
"""
Telegram Bot for Video Conversion
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ jrottenberg/ffmpeg

AICODE-NOTE: –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏
- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import tempfile
import subprocess
import asyncio
import aiohttp
from pathlib import Path
from typing import Optional
from loguru import logger

from telebot.async_telebot import AsyncTeleBot
from telebot import types

# AICODE-NOTE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ loguru –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add(
    "logs/bot.log",
    rotation="10 MB",
    retention="7 days",
    compression="zip",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
    level="INFO"
)
logger.add(
    "logs/error.log",
    rotation="10 MB",
    retention="30 days",
    compression="zip",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
    level="ERROR"
)
logger.add(
    lambda msg: print(msg, end=""),
    format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    level="INFO"
)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
Path("logs").mkdir(exist_ok=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

# AICODE-NOTE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
CONVERSION_TIMEOUT = int(os.getenv('CONVERSION_TIMEOUT', '300'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç

TMP_DIR = Path("/tmp/telegram_video_converter")
TMP_DIR.mkdir(exist_ok=True)

class VideoConverterBot:
    def __init__(self):
        self.bot = AsyncTeleBot(BOT_TOKEN)
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        @self.bot.message_handler(commands=['start'])
        async def start_command(message):
            await self.start_command(message)
        
        @self.bot.message_handler(commands=['help'])
        async def help_command(message):
            await self.help_command(message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        @self.bot.callback_query_handler(func=lambda call: True)
        async def button_callback(call):
            await self.button_callback(call)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        @self.bot.message_handler(content_types=['document'])
        async def handle_document(message):
            await self.handle_document(message)
    
    async def start_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="convert_video"))
        
        welcome_text = (
            "üé• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await self.bot.reply_to(message, welcome_text, reply_markup=keyboard)
    
    async def help_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
            "‚Ä¢ /start - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª\n\n"
            "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ –í—Ö–æ–¥–Ω—ã–µ: MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ\n"
            "‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: MP4 (H.264)\n\n"
            "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
            "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ: H.264 (NVENC)\n"
            "‚Ä¢ –ö–æ–¥–µ–∫ –∞—É–¥–∏–æ: AAC\n"
            f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: {CONVERSION_TIMEOUT} —Å–µ–∫—É–Ω–¥\n\n"
            "üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 2 –ì–ë\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
            "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!"
        )
        
        await self.bot.reply_to(message, help_text)
    
    async def button_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        await self.bot.answer_callback_query(call.id)
        
        if call.data == "convert_video":
            await self.bot.edit_message_text(
                "üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ.",
                call.message.chat.id,
                call.message.message_id
            )
    
    async def handle_document(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        document = message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        if not self._is_video_file(document.file_name):
            await self.bot.reply_to(
                message,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (MP4, AVI, MOV, MKV –∏ —Ç.–¥.)"
            )
            return
        
        # AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 2GB –¥–ª—è –≤–∏–¥–µ–æ)
        file_size_mb = document.file_size / (1024 * 1024) if document.file_size else 0
        max_size_mb = 2000  # 2GB –≤ –ú–ë
        
        if file_size_mb > max_size_mb:
            await self.bot.reply_to(
                message,
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë). "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size_mb} –ú–ë.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await self.bot.reply_to(
            message, 
            f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ ({file_size_mb:.1f} –ú–ë)...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤."
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            user_tmp_dir = TMP_DIR / f"user_{message.from_user.id}_{message.message_id}"
            user_tmp_dir.mkdir(exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_path = await self._download_file(document, user_tmp_dir)
            
            # AICODE-NOTE: –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>1.5GB) —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            file_size_mb = file_path.stat().st_size / (1024 * 1024)
            
            if file_size_mb > 1500:  # 1.5GB
                await self.bot.edit_message_text(
                    f"üìÇ –§–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë). –†–∞–∑–¥–µ–ª—è—é –Ω–∞ —á–∞—Å—Ç–∏...",
                    processing_msg.chat.id,
                    processing_msg.message_id
                )
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏
                video_parts = await self._split_large_video(file_path, user_tmp_dir)
                
                await self.bot.edit_message_text(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(video_parts)} —á–∞—Å—Ç–µ–π. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å...",
                    processing_msg.chat.id,
                    processing_msg.message_id
                )
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
                converted_parts = []
                for i, part_path in enumerate(video_parts):
                    await self.bot.edit_message_text(
                        f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —á–∞—Å—Ç—å {i+1} –∏–∑ {len(video_parts)}...",
                        processing_msg.chat.id,
                        processing_msg.message_id
                    )
                    
                    converted_part = await self._convert_video(part_path, user_tmp_dir, None)
                    converted_parts.append(converted_part)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
                await self._send_converted_video_parts(message, converted_parts, processing_msg)
                
            else:
                # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                output_path = await self._convert_video(file_path, user_tmp_dir, processing_msg)
                await self._send_converted_video(message, output_path, processing_msg)
            
        except Exception as e:
            logger.error(f"Error processing video: {e}", exc_info=True)
            await self.bot.edit_message_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}",
                message.chat.id,
                processing_msg.message_id
            )
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            await self._cleanup_temp_files(user_tmp_dir)
    
    def _is_video_file(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ"""
        if not filename:
            return False
        
        video_extensions = {'.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v'}
        return Path(filename).suffix.lower() in video_extensions
    
    async def _download_file(self, document, tmp_dir: Path) -> Path:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        file_info = await self.bot.get_file(document.file_id)
        file_path = tmp_dir / document.file_name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.telegram.org/file/bot{self.bot.token}/{file_info.file_path}") as response:
                with open(file_path, 'wb') as f:
                    async for chunk in response.content.iter_chunked(8192):
                        f.write(chunk)
        
        logger.info(f"Downloaded file: {file_path}")
        
        return file_path
    
    async def _convert_video(self, input_path: Path, tmp_dir: Path, processing_msg=None) -> Path:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ jrottenberg/ffmpeg —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π NVIDIA"""
        output_filename = f"converted_{input_path.stem}.mp4"
        output_path = tmp_dir / output_filename
        
        # AICODE-NOTE: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        file_size_mb = input_path.stat().st_size / (1024 * 1024)
        
        if file_size_mb > 500:  # –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 500 –ú–ë –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
            video_params = [
                "-vf", "fps=8,format=yuv420p,scale=1280:720",  # –ú–µ–Ω—å—à–µ FPS –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                "-c:v", "h264_nvenc",
                "-preset", "p7",
                "-cq", "28",  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –±–æ–ª—å—à–µ —Å–∂–∞—Ç–∏–µ
                "-maxrate", "2M",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç
                "-bufsize", "4M"
            ]
            audio_params = ["-c:a", "aac", "-b:a", "32k", "-ac", "1"]  # –ú–µ–Ω—å—à–µ –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
        elif file_size_mb > 100:  # –î–ª—è —Ñ–∞–π–ª–æ–≤ 100-500 –ú–ë
            video_params = [
                "-vf", "fps=10,format=yuv420p,scale=1600:900",
                "-c:v", "h264_nvenc",
                "-preset", "p7",
                "-cq", "26",
                "-maxrate", "3M",
                "-bufsize", "6M"
            ]
            audio_params = ["-c:a", "aac", "-b:a", "48k", "-ac", "1"]
        else:  # –î–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ 100 –ú–ë –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            video_params = [
                "-vf", "fps=10,format=yuv420p",
                "-c:v", "h264_nvenc",
                "-preset", "p7",
                "-cq", "26",
                "-s", "1920x1080"
            ]
            audio_params = ["-c:a", "aac", "-b:a", "64k", "-ac", "1"]
        
        # Docker –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º jrottenberg/ffmpeg
        docker_cmd = [
            "docker", "run", "--rm",
            "--gpus", "all",
            "-v", f"{tmp_dir.absolute()}:/workdir",
            "-w", "/workdir",
            "jrottenberg/ffmpeg:5.1.4-nvidia2004",
            "-threads", "0",
            "-i", input_path.name,
            *video_params,
            *audio_params,
            "-y", output_filename
        ]
        
        logger.info(f"Running Docker command: {' '.join(docker_cmd)}")
        
        # AICODE-NOTE: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        if processing_msg:
            await self.bot.edit_message_text(
                f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ ({file_size_mb:.1f} –ú–ë)...\n"
                f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {'–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ' if file_size_mb > 500 else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–∂–∞—Ç–∏–µ'}\n"
                "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                processing_msg.chat.id,
                processing_msg.message_id
            )
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            process = await asyncio.create_subprocess_exec(
                *docker_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            try:
                stdout, stderr = await asyncio.wait_for(
                    process.communicate(),
                    timeout=CONVERSION_TIMEOUT
                )
            except asyncio.TimeoutError:
                process.kill()
                await process.wait()
                raise Exception(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ª–∏–º–∏—Ç: {CONVERSION_TIMEOUT} —Å–µ–∫—É–Ω–¥)")
            
            if process.returncode != 0:
                raise Exception(f"Docker command failed: {stderr.decode()}")
            
            if not output_path.exists():
                raise Exception("Output file was not created")
            
            # AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_size_mb = output_path.stat().st_size / (1024 * 1024)
            compression_ratio = (1 - output_size_mb / file_size_mb) * 100 if file_size_mb > 0 else 0
            
            logger.info(f"Video converted successfully: {output_path} (—Å–∂–∞—Ç–∏–µ: {compression_ratio:.1f}%)")
            
            # AICODE-NOTE: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            if processing_msg:
                await self.bot.edit_message_text(
                    f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n"
                    f"üìä –í—ã—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä: {output_size_mb:.1f} –ú–ë\n"
                    f"üìä –°–∂–∞—Ç–∏–µ: {compression_ratio:.1f}%\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...",
                    processing_msg.chat.id,
                    processing_msg.message_id
                )
            
            return output_path
            
        except Exception as e:
            logger.error(f"Docker conversion error: {e}", exc_info=True)
            raise
    
    async def _send_converted_video(self, message, video_path: Path, processing_msg):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"""
        try:
            # AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            file_size_mb = video_path.stat().st_size / (1024 * 1024)
            max_telegram_size = 2000  # 2GB –≤ –ú–ë
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await self.bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
            
            if file_size_mb > max_telegram_size:
                # AICODE-NOTE: –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                await self.bot.reply_to(
                    message,
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–∂–µ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë).\n\n"
                    "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ\n"
                    "‚Ä¢ –°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π\n\n"
                    "üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
                )
                return
            
            # AICODE-NOTE: –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ä–∞
            try:
                with open(video_path, 'rb') as video_file:
                    await self.bot.send_video(
                        message.chat.id,
                        video=video_file,
                        caption="‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!\n\n"
                               f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n"
                               "üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—è:\n"
                               "‚Ä¢ –ö–æ–¥–µ–∫: H.264 (NVENC)\n"
                               "‚Ä¢ –ê—É–¥–∏–æ: AAC"
                    )
                
                logger.info(f"Sent converted video: {video_path}")
                
            except Exception as send_error:
                error_msg = str(send_error)
                if "file is too big" in error_msg.lower() or "400" in error_msg:
                    # AICODE-NOTE: –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                    await self.bot.reply_to(
                        message,
                        f"‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ –≤–∏–¥–µ–æ ({file_size_mb:.1f} –ú–ë).\n\n"
                        "üìÅ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç..."
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                    with open(video_path, 'rb') as video_file:
                        await self.bot.send_document(
                            message.chat.id,
                            document=video_file,
                            caption="‚úÖ –í–∏–¥–µ–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç!\n\n"
                                   f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n"
                                   "üí° –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª"
                        )
                    
                    logger.info(f"Sent converted video as document: {video_path}")
                else:
                    raise send_error
            
        except Exception as e:
            logger.error(f"Error sending video: {e}", exc_info=True)
            await self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
    
    async def _send_converted_video_parts(self, message, video_parts: list[Path], processing_msg):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await self.bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
            
            total_size = sum(part.stat().st_size for part in video_parts) / (1024 * 1024)
            
            await self.bot.reply_to(
                message,
                f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: {len(video_parts)}\n"
                f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} –ú–ë\n\n"
                "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç–∏..."
            )
            
            for i, part_path in enumerate(video_parts):
                part_size_mb = part_path.stat().st_size / (1024 * 1024)
                
                try:
                    with open(part_path, 'rb') as video_file:
                        await self.bot.send_video(
                            message.chat.id,
                            video=video_file,
                            caption=f"üìπ –ß–∞—Å—Ç—å {i+1} –∏–∑ {len(video_parts)}\n"
                                   f"üìä –†–∞–∑–º–µ—Ä: {part_size_mb:.1f} –ú–ë"
                        )
                    
                    logger.info(f"Sent video part {i+1}: {part_path}")
                    
                except Exception as part_error:
                    error_msg = str(part_error)
                    if "file is too big" in error_msg.lower():
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
                        with open(part_path, 'rb') as video_file:
                            await self.bot.send_document(
                                message.chat.id,
                                document=video_file,
                                caption=f"üìÑ –ß–∞—Å—Ç—å {i+1} –∏–∑ {len(video_parts)} (–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç)\n"
                                       f"üìä –†–∞–∑–º–µ—Ä: {part_size_mb:.1f} –ú–ë"
                            )
                        logger.info(f"Sent video part {i+1} as document: {part_path}")
                    else:
                        raise part_error
                
                # AICODE-NOTE: –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                await asyncio.sleep(1)
            
            await self.bot.reply_to(
                message,
                "üéâ –í—Å–µ —á–∞—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n"
                "üí° –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∫–∞—á–∞–π—Ç–µ –≤—Å–µ —á–∞—Å—Ç–∏ –∏ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."
            )
            
        except Exception as e:
            logger.error(f"Error sending video parts: {e}", exc_info=True)
            await self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–µ–π –≤–∏–¥–µ–æ: {str(e)}")
    
    async def _split_large_video(self, input_path: Path, tmp_dir: Path, max_size_mb: int = 1500) -> list[Path]:
        """–†–∞–∑–¥–µ–ª—è–µ—Ç –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏"""
        file_size_mb = input_path.stat().st_size / (1024 * 1024)
        
        if file_size_mb <= max_size_mb:
            return [input_path]
        
        # AICODE-NOTE: –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        duration_cmd = [
            "docker", "run", "--rm",
            "-v", f"{tmp_dir.absolute()}:/workdir",
            "-w", "/workdir",
            "jrottenberg/ffmpeg:5.1.4-nvidia2004",
            "-i", input_path.name,
            "-f", "null", "-"
        ]
        
        try:
            process = await asyncio.create_subprocess_exec(
                *duration_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            # AICODE-NOTE: –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ stderr (ffmpeg –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—É–¥–∞)
            duration_match = None
            for line in stderr.decode().split('\n'):
                if 'Duration:' in line:
                    duration_match = line
                    break
            
            if not duration_match:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ")
            
            # AICODE-NOTE: –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ñ–æ—Ä–º–∞—Ç: HH:MM:SS.microseconds)
            duration_str = duration_match.split('Duration:')[1].split(',')[0].strip()
            h, m, s = duration_str.split(':')
            total_seconds = int(h) * 3600 + int(m) * 60 + float(s)
            
            # AICODE-NOTE: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
            num_parts = int((file_size_mb / max_size_mb) + 1)
            part_duration = total_seconds / num_parts
            
            logger.info(f"Splitting video into {num_parts} parts, {part_duration:.1f}s each")
            
            parts = []
            for i in range(num_parts):
                start_time = i * part_duration
                part_filename = f"part_{i+1}_{input_path.stem}.mp4"
                part_path = tmp_dir / part_filename
                
                split_cmd = [
                    "docker", "run", "--rm",
                    "--gpus", "all",
                    "-v", f"{tmp_dir.absolute()}:/workdir",
                    "-w", "/workdir",
                    "jrottenberg/ffmpeg:5.1.4-nvidia2004",
                    "-i", input_path.name,
                    "-ss", str(start_time),
                    "-t", str(part_duration),
                    "-c", "copy",  # –ö–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    "-y", part_filename
                ]
                
                process = await asyncio.create_subprocess_exec(
                    *split_cmd,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                stdout, stderr = await process.communicate()
                
                if process.returncode == 0 and part_path.exists():
                    parts.append(part_path)
                    logger.info(f"Created part {i+1}: {part_path}")
                else:
                    logger.error(f"Failed to create part {i+1}: {stderr.decode()}")
            
            return parts
            
        except Exception as e:
            logger.error(f"Error splitting video: {e}", exc_info=True)
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤–∏–¥–µ–æ: {str(e)}")
    
    async def _cleanup_temp_files(self, tmp_dir: Path):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            import shutil
            if tmp_dir.exists():
                shutil.rmtree(tmp_dir)
                logger.info(f"Cleaned up temp directory: {tmp_dir}")
        except Exception as e:
            logger.error(f"Error cleaning up temp files: {e}", exc_info=True)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("Starting Telegram Bot...")
        await self.bot.polling(none_stop=True)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = VideoConverterBot()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot error: {e}", exc_info=True)

if __name__ == "__main__":
    asyncio.run(main())