#!/usr/bin/env python3
"""
Telegram Bot for Video Conversion
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ jrottenberg/ffmpeg
–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ Telethon
"""
import sys
import os
import tempfile
import subprocess
import asyncio
import aiohttp
from pathlib import Path
from typing import Optional, Dict, Any
from loguru import logger

from telethon import TelegramClient, events
from telethon.tl.types import Message, DocumentAttributeVideo, DocumentAttributeFilename, Document
from telethon.errors import FilePartTooBigError, FloodWaitError, SessionPasswordNeededError
from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
from telethon.tl.custom import Button

# AICODE-NOTE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ loguru –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
log_format = (
    "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | "
    "<level>{level: <8}</level> | "
    "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
    "<level>{message}</level>"
)

# Console output
logger.add(
    sys.stdout, format=log_format, level="DEBUG", colorize=True, backtrace=True, diagnose=True
)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
Path("logs").mkdir(exist_ok=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

# AICODE-NOTE: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telethon (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞)
TELEGRAM_API_ID = os.getenv('TELEGRAM_API_ID')
TELEGRAM_API_HASH = os.getenv('TELEGRAM_API_HASH')

if not all([TELEGRAM_API_ID, TELEGRAM_API_HASH]):
    raise ValueError("TELEGRAM_API_ID and TELEGRAM_API_HASH environment variables are required")

# AICODE-NOTE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
CONVERSION_TIMEOUT = int(os.getenv('CONVERSION_TIMEOUT', '300'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç

# AICODE-NOTE: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram (—á–µ—Ä–µ–∑ Telethon –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ 2 –ì–ë)
MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024  # 2 –ì–ë - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Telethon
MAX_SEND_SIZE = 2 * 1024 * 1024 * 1024  # 2 –ì–ë - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telethon

# AICODE-NOTE: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
MB = 1024 * 1024
GB = 1024 * MB

TMP_DIR = Path("/tmp/telegram_video_converter")
TMP_DIR.mkdir(exist_ok=True)

class VideoConverterBot:
    def __init__(self):
        # AICODE-NOTE: –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π Telethon
        session_dir = Path("sessions")
        session_dir.mkdir(exist_ok=True)
        
        # AICODE-NOTE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
        self.client = TelegramClient(
            str(session_dir / 'telegram_bot_session'),
            int(TELEGRAM_API_ID),
            TELEGRAM_API_HASH
        )
        
        
        # AICODE-NOTE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # AICODE-NOTE: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @self.client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            logger.info(f"/start")
            await self.start_command(event)
        
        # AICODE-NOTE: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        @self.client.on(events.NewMessage(pattern='/help'))
        async def help_handler(event):
            logger.info(f"/help")
            await self.help_command(event)
        
        # AICODE-NOTE: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (callback queries)
        @self.client.on(events.CallbackQuery)
        async def callback_handler(event):
            logger.info(f"/button")
            await self.button_callback(event)
        
        # AICODE-NOTE: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤)
        @self.client.on(events.NewMessage(func=lambda e: e.document))
        async def document_handler(event):
            logger.info(f"/document")
            await self.handle_document(event)
        
        # AICODE-NOTE: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.client.on(events.NewMessage(func=lambda e: e.text and not e.text.startswith('/')))
        async def text_handler(event):
            await self.handle_text(event)
    
    async def start_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # AICODE-NOTE: –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é –æ–±—ä–µ–∫—Ç–æ–≤ Button –∏–∑ telethon.tl.custom
        keyboard = [
            [Button.inline("üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", b"convert_video")],
            [Button.inline("üîß –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", b"bot_status")]
        ]
        
        welcome_text = (
            "üé• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ Telethon –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–æ 2 –ì–ë.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await event.respond(welcome_text, buttons=keyboard)
    
    async def help_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        max_size_gb = MAX_FILE_SIZE / GB
        help_text = (
            "ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
            "‚Ä¢ /start - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª\n\n"
            "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ –í—Ö–æ–¥–Ω—ã–µ: MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ\n"
            "‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: MP4 (H.264, 1920x1080, 10fps)\n\n"
            "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
            "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1920x1080\n"
            "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤: 10 FPS\n"
            "‚Ä¢ –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ: H.264 (NVENC)\n"
            "‚Ä¢ –ö–æ–¥–µ–∫ –∞—É–¥–∏–æ: AAC, 64kbps, –º–æ–Ω–æ\n"
            f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: {CONVERSION_TIMEOUT} —Å–µ–∫—É–Ω–¥\n\n"
            f"üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤:\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {max_size_gb:.1f} –ì–ë\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {max_size_gb:.1f} –ì–ë\n\n"
            "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!\n"
            "üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Telethon - –±—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏."
        )
        
        await event.respond(help_text)
    
    async def button_callback(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        await event.answer()
        
        if event.data == b"convert_video":
            max_size_gb = MAX_FILE_SIZE / GB
            await event.edit(
                f"üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n"
                f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ\n"
                f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {max_size_gb:.1f} –ì–ë\n\n"
                f"üöÄ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–æ 2 –ì–ë –±–ª–∞–≥–æ–¥–∞—Ä—è Telethon!"
            )
        elif event.data == b"bot_status":
            status_text = (
                "üîß –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
                "‚úÖ Telethon: –ê–∫—Ç–∏–≤–µ–Ω\n"
                "‚úÖ Docker: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
                "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: –î–æ—Å—Ç—É–ø–Ω–∞\n\n"
                f"üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤: –¥–æ {MAX_FILE_SIZE / GB:.1f} –ì–ë\n"
                f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {CONVERSION_TIMEOUT} —Å–µ–∫—É–Ω–¥\n\n"
                "üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            )
            await event.edit(status_text)
    
    async def handle_document(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        document = event.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        if not self._is_video_file(document):
            await event.respond(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (MP4, AVI, MOV, MKV –∏ —Ç.–¥.)"
            )
            return
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
        
        # AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = document.size or 0
        if file_size > MAX_FILE_SIZE:
            file_size_gb = file_size / GB
            max_size_gb = MAX_FILE_SIZE / GB
            await event.respond(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!\n\n"
                f"üìä –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {file_size_gb:.1f} –ì–ë\n"
                f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size_gb:.1f} –ì–ë\n\n"
                f"üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏."
            )
            return
        
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞...")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

        processing_msg = await event.respond("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
        
        try:
            # Create temporary directory
            user_tmp_dir = TMP_DIR / f"user_{event.sender_id}_{event.id}"
            user_tmp_dir.mkdir(exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–ª–∏ tmp dir: {user_tmp_dir}")
            
            # ‚úÖ FIXED: Pass correct parameters
            file_path = await self._download_file_telethon(document, event.chat_id, user_tmp_dir)
            logger.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
            output_path = await self._convert_video(file_path, user_tmp_dir)
            logger.info(f"–§–∞–π–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if output_path.stat().st_size > MAX_SEND_SIZE:
                output_size_gb = output_path.stat().st_size / GB
                max_send_gb = MAX_SEND_SIZE / GB
                await processing_msg.edit(
                    f"‚ö†Ô∏è –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!\n\n"
                    f"üìä –†–∞–∑–º–µ—Ä —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_size_gb:.1f} –ì–ë\n"
                    f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {max_send_gb:.1f} –ì–ë\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏."
                )

                logger.info(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_converted_video(event, output_path, processing_msg)
            
        except Exception as e:
            logger.error(f"Error processing video: {e}", exc_info=True)
            
            # AICODE-NOTE: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            error_message = str(e)
            if "file is too big" in error_message.lower():
                error_text = (
                    "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!\n\n"
                    f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ({MAX_FILE_SIZE / GB:.1f} –ì–ë).\n\n"
                    "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                    "‚Ä¢ –°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π\n"
                    "‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ –¥–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"
                )
            elif "bad request" in error_message.lower():
                error_text = (
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API!\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n"
                    "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Telegram\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
            else:
                error_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {error_message}"
            
            await processing_msg.edit(error_text)
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            await self._cleanup_temp_files(user_tmp_dir)
    
    async def handle_text(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # AICODE-NOTE: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await event.respond(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
    
    def _is_video_file(self, document) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ"""
        # AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME —Ç–∏–ø –∏ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if hasattr(document, 'mime_type') and document.mime_type:
            if document.mime_type.startswith('video/'):
                return True
        
        # AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
        for attr in document.attributes:
            if isinstance(attr, DocumentAttributeVideo):
                return True
            elif isinstance(attr, DocumentAttributeFilename):
                filename = attr.file_name.lower()
                video_extensions = {'.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v'}
                if any(filename.endswith(ext) for ext in video_extensions):
                    return True
        
        return False
    
    async def _download_file_telethon(self, document: Document, chat_id: int, tmp_dir: Path) -> Path:
        """Proper file download implementation with progress tracking"""
        filename = "input_video" # –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        for attr in document.attributes:
            if isinstance(attr, DocumentAttributeFilename):
                filename = attr.file_name
                break

        file_path = tmp_dir / filename
        file_size = document.size or 0
        MB = 1024 * 1024

        # Send initial progress message
        progress_msg = await self.client.send_message(
            chat_id, 
            f"‚è≥ Downloading file... ({(file_size / MB):.1f} MB)"
        )
        
        try:
            downloaded_size = 0
            last_update = 0
            MB = 1024 * 1024
            
            # Download file with progress tracking
            with open(file_path, 'wb') as f:
                async for chunk in self.client.iter_download(document):
                    if chunk:
                        f.write(chunk)
                        downloaded_size += len(chunk)
                        
                        # Update progress every 5MB
                        if downloaded_size - last_update > (5 * MB) or downloaded_size == file_size:
                            if file_size > 0:
                                progress_percent = (downloaded_size / file_size * 100)
                                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª % —Å –ø–æ–º–æ—â—å—é %%
                                progress_text = (
                                    f"üì• Downloading: {downloaded_size / MB:.1f}MB/{file_size / MB:.1f}MB "
                                    f"({progress_percent:.1f}%%)"
                                )
                            else:
                                progress_text = f"üì• Downloading: {downloaded_size / MB:.1f}MB"
                            
                            try:
                                await self.client.edit_message(
                                    chat_id, 
                                    progress_msg, 
                                    text=progress_text
                                )
                                last_update = downloaded_size
                            except Exception as e:
                                logger.warning(f"Could not update progress: {e}")
            
            # Final success message
            await self.client.edit_message(
                chat_id, 
                progress_msg, 
                text=f"‚úÖ File downloaded! Size: {(file_size / MB):.1f} MB"
            )
            
            return file_path
            
        except Exception as e:
            # Clean up on error
            if file_path.exists():
                file_path.unlink()
            await self.client.edit_message(
                chat_id, 
                progress_msg, 
                text=f"‚ùå Download failed: {str(e)}"
            )
            raise
    
    async def _convert_video(self, input_path: Path, tmp_dir: Path) -> Path:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ jrottenberg/ffmpeg —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π NVIDIA"""
        output_filename = f"converted_video.mp4"
        output_path = tmp_dir / output_filename

        # Docker –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º jrottenberg/ffmpeg
        docker_cmd = [
            "docker", "run", "--rm",
            "--privileged",
            "--gpus", "all",
            # "--entrypoint", "/bin/sh",
            "-v", f"{tmp_dir.absolute()}:/workdir",
            "-w", "/workdir",
            "jrottenberg/ffmpeg:5.1.4-nvidia2004",
            # "-c", "ffmpeg",
            "-threads", "0",
            "-i", input_path.name,
            "-vf", "fps=10,format=yuv420p",
            "-c:v", "h264_nvenc",
            "-preset", "p7",
            "-cq", "26",
            "-s", "1920x1080",
            "-c:a", "aac",
            "-b:a", "64k",
            "-ac", "1",
            "-y", output_filename
        ]
        
        logger.info(f"Running Docker command: {' '.join(docker_cmd)}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            process = await asyncio.create_subprocess_exec(
                *docker_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            try:
                stdout, stderr = await asyncio.wait_for(
                    process.communicate(),
                    timeout=CONVERSION_TIMEOUT
                )
            except asyncio.TimeoutError:
                process.kill()
                await process.wait()
                raise Exception(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ª–∏–º–∏—Ç: {CONVERSION_TIMEOUT} —Å–µ–∫—É–Ω–¥)")
            
            if process.returncode != 0:
                raise Exception(f"Docker command failed: {stderr.decode()}")
            
            if not output_path.exists():
                raise Exception("Output file was not created")
            
            logger.info(f"Video converted successfully: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"Docker conversion error: {e}", exc_info=True)
            raise
    
    async def _send_converted_video(self, event, video_path: Path, processing_msg):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            await event.respond(
                "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!\n\n"
                "üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1920x1080\n"
                "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤: 10 FPS\n"
                "‚Ä¢ –ö–æ–¥–µ–∫: H.264 (NVENC)\n"
                "‚Ä¢ –ê—É–¥–∏–æ: AAC, 64kbps",
                file=video_path,
            )
            
            logger.info(f"Sent converted video: {video_path}")
            
        except Exception as e:
            logger.error(f"Error sending video: {e}", exc_info=True)
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
    
    async def _cleanup_temp_files(self, tmp_dir: Path):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            import shutil
            if tmp_dir.exists():
                shutil.rmtree(tmp_dir)
                logger.info(f"Cleaned up temp directory: {tmp_dir}")
        except Exception as e:
            logger.error(f"Error cleaning up temp files: {e}", exc_info=True)
    
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("Starting Telegram Bot with Telethon...")
        
        try:
            # AICODE-NOTE: –ó–∞–ø—É—Å–∫–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ –±–æ—Ç (—Ç–æ–ª—å–∫–æ bot_token)
            await self.client.start(bot_token=BOT_TOKEN)
            logger.info("Telethon client started successfully")
            
            # AICODE-NOTE: –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.client.run_until_disconnected()
            
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
        except Exception as e:
            logger.error(f"Bot error: {e}", exc_info=True)
    

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = VideoConverterBot()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot error: {e}", exc_info=True)

if __name__ == "__main__":
    asyncio.run(main())