#!/usr/bin/env python3
"""
Telegram Bot for Video Conversion
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ jrottenberg/ffmpeg
"""

import os
import tempfile
import subprocess
import asyncio
import aiohttp
from pathlib import Path
from typing import Optional
from loguru import logger

from telebot.async_telebot import AsyncTeleBot
from telebot import types
from telethon import TelegramClient
from telethon.errors import FileTooBigError, FloodWaitError

# AICODE-NOTE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ loguru –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add(
    "logs/bot.log",
    rotation="10 MB",
    retention="7 days",
    compression="zip",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
    level="INFO"
)
logger.add(
    "logs/error.log",
    rotation="10 MB",
    retention="30 days",
    compression="zip",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
    level="ERROR"
)
logger.add(
    lambda msg: print(msg, end=""),
    format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    level="INFO"
)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
Path("logs").mkdir(exist_ok=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

# AICODE-NOTE: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telethon –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Bot API
TELEGRAM_API_ID = os.getenv('TELEGRAM_API_ID')
TELEGRAM_API_HASH = os.getenv('TELEGRAM_API_HASH')
TELEGRAM_PHONE = os.getenv('TELEGRAM_PHONE')  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telethon
USE_TELETHON = all([TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE])
if USE_TELETHON:
    logger.info("Telethon configuration found - large file support enabled")
else:
    logger.warning("Telethon configuration missing - limited to 50MB files")

# AICODE-NOTE: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
CONVERSION_TIMEOUT = int(os.getenv('CONVERSION_TIMEOUT', '300'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç

# AICODE-NOTE: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram Bot API
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 –ú–ë - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Bot API
MAX_SEND_SIZE = 50 * 1024 * 1024  # 50 –ú–ë - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Bot API

# AICODE-NOTE: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
MB = 1024 * 1024

TMP_DIR = Path("/tmp/telegram_video_converter")
TMP_DIR.mkdir(exist_ok=True)

class VideoConverterBot:
    def __init__(self):
        self.bot = AsyncTeleBot(BOT_TOKEN)
        self.telethon_client = None
        self._setup_handlers()
        
        # AICODE-NOTE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        if USE_TELETHON:
            # AICODE-NOTE: –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π Telethon
            session_dir = Path("sessions")
            session_dir.mkdir(exist_ok=True)
            
            self.telethon_client = TelegramClient(
                str(session_dir / 'telegram_bot_session'),
                int(TELEGRAM_API_ID),
                TELEGRAM_API_HASH
            )
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        @self.bot.message_handler(commands=['start'])
        async def start_command(message):
            await self.start_command(message)
        
        @self.bot.message_handler(commands=['help'])
        async def help_command(message):
            await self.help_command(message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        @self.bot.callback_query_handler(func=lambda call: True)
        async def button_callback(call):
            await self.button_callback(call)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        @self.bot.message_handler(content_types=['document'])
        async def handle_document(message):
            await self.handle_document(message)
    
    async def start_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="convert_video"))
        
        welcome_text = (
            "üé• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await self.bot.reply_to(message, welcome_text, reply_markup=keyboard)
    
    async def help_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        max_size_mb = MAX_FILE_SIZE / MB
        help_text = (
            "ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
            "‚Ä¢ /start - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª\n\n"
            "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ –í—Ö–æ–¥–Ω—ã–µ: MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ\n"
            "‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: MP4 (H.264, 1920x1080, 10fps)\n\n"
            "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
            "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1920x1080\n"
            "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤: 10 FPS\n"
            "‚Ä¢ –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ: H.264 (NVENC)\n"
            "‚Ä¢ –ö–æ–¥–µ–∫ –∞—É–¥–∏–æ: AAC, 64kbps, –º–æ–Ω–æ\n"
            f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: {CONVERSION_TIMEOUT} —Å–µ–∫—É–Ω–¥\n\n"
            f"üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤:\n"
            f"‚Ä¢ Bot API (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π): {max_size_mb:.0f} –ú–ë\n"
            f"‚Ä¢ Telethon (–±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã): –¥–æ 2 –ì–ë\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {max_size_mb:.0f} –ú–ë\n\n"
            "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!\n"
            f"‚ö†Ô∏è –§–∞–π–ª—ã –±–æ–ª—å—à–µ {max_size_mb:.0f} –ú–ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Telethon (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)."
        )
        
        await self.bot.reply_to(message, help_text)
    
    async def button_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        await self.bot.answer_callback_query(call.id)
        
        if call.data == "convert_video":
            max_size_mb = MAX_FILE_SIZE / MB
            await self.bot.edit_message_text(
                f"üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n"
                f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ\n"
                f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {max_size_mb:.0f} –ú–ë\n\n"
                f"‚ö†Ô∏è –ï—Å–ª–∏ –≤–∞—à —Ñ–∞–π–ª –±–æ–ª—å—à–µ {max_size_mb:.0f} –ú–ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.",
                call.message.chat.id,
                call.message.message_id
            )
    
    async def handle_document(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        document = message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        if not self._is_video_file(document.file_name):
            await self.bot.reply_to(
                message,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (MP4, AVI, MOV, MKV –∏ —Ç.–¥.)"
            )
            return
        
        # AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
        file_size = document.file_size or 0
        use_telethon = USE_TELETHON and file_size > MAX_FILE_SIZE
        
        if file_size > MAX_FILE_SIZE and not USE_TELETHON:
            file_size_mb = file_size / MB
            max_size_mb = MAX_FILE_SIZE / MB
            await self.bot.reply_to(
                message,
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!\n\n"
                f"üìä –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {file_size_mb:.1f} –ú–ë\n"
                f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä Bot API: {max_size_mb:.0f} –ú–ë\n\n"
                f"üí° –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ {max_size_mb:.0f} –ú–ë —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telethon.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏."
            )
            return
        elif use_telethon:
            file_size_mb = file_size / MB
            await self.bot.reply_to(
                message,
                f"üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({file_size_mb:.1f} –ú–ë)\n"
                f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é Telethon –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏..."
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await self.bot.reply_to(message, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            user_tmp_dir = TMP_DIR / f"user_{message.from_user.id}_{message.message_id}"
            user_tmp_dir.mkdir(exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (–≤—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞)
            if use_telethon:
                file_path = await self._download_file_telethon(document, user_tmp_dir)
            else:
                file_path = await self._download_file(document, user_tmp_dir)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
            output_path = await self._convert_video(file_path, user_tmp_dir)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if output_path.stat().st_size > MAX_SEND_SIZE:
                output_size_mb = output_path.stat().st_size / MB
                max_send_mb = MAX_SEND_SIZE / MB
                await self.bot.edit_message_text(
                    f"‚ö†Ô∏è –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!\n\n"
                    f"üìä –†–∞–∑–º–µ—Ä —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_size_mb:.1f} –ú–ë\n"
                    f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {max_send_mb:.0f} –ú–ë\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏.",
                    message.chat.id,
                    processing_msg.message_id
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_converted_video(message, output_path, processing_msg)
            
        except Exception as e:
            logger.error(f"Error processing video: {e}", exc_info=True)
            
            # AICODE-NOTE: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API
            error_message = str(e)
            if "file is too big" in error_message.lower():
                error_text = (
                    "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!\n\n"
                    f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram Bot API ({MAX_FILE_SIZE / (1024*1024):.0f} –ú–ë).\n\n"
                    "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                    "‚Ä¢ –°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π\n"
                    "‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ –¥–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"
                )
            elif "bad request" in error_message.lower():
                error_text = (
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram API!\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n"
                    "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Telegram\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
            else:
                error_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {error_message}"
            
            await self.bot.edit_message_text(
                error_text,
                message.chat.id,
                processing_msg.message_id
            )
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            await self._cleanup_temp_files(user_tmp_dir)
    
    def _is_video_file(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ"""
        if not filename:
            return False
        
        video_extensions = {'.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v'}
        return Path(filename).suffix.lower() in video_extensions
    
    async def _download_file(self, document, tmp_dir: Path) -> Path:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        file_info = await self.bot.get_file(document.file_id)
        file_path = tmp_dir / document.file_name
        
        # AICODE-NOTE: –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        file_size = document.file_size or 0
        downloaded_size = 0
        
        logger.info(f"Starting download: {document.file_name} ({file_size / MB:.1f} MB)")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            async with aiohttp.ClientSession() as session:
                async with session.get(f"https://api.telegram.org/file/bot{self.bot.token}/{file_info.file_path}") as response:
                    if response.status != 200:
                        raise Exception(f"Failed to download file: HTTP {response.status}")
                    
                    with open(file_path, 'wb') as f:
                        async for chunk in response.content.iter_chunked(8192):
                            f.write(chunk)
                            downloaded_size += len(chunk)
                            
                            # AICODE-NOTE: –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ú–ë
                            if downloaded_size % (10 * MB) == 0 or downloaded_size == file_size:
                                progress_percent = (downloaded_size / file_size * 100) if file_size > 0 else 0
                                logger.info(f"Download progress: {downloaded_size / MB:.1f} MB / {file_size / MB:.1f} MB ({progress_percent:.1f}%)")
        
        except aiohttp.ClientError as e:
            raise Exception(f"Network error during download: {str(e)}")
        except Exception as e:
            raise Exception(f"Download failed: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–∫–∞—á–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if file_size > 0 and file_path.stat().st_size != file_size:
            raise Exception(f"Download incomplete: expected {file_size} bytes, got {file_path.stat().st_size} bytes")
        
        logger.info(f"Successfully downloaded file: {file_path}")
        return file_path
    
    async def _convert_video(self, input_path: Path, tmp_dir: Path) -> Path:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ jrottenberg/ffmpeg —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π NVIDIA"""
        output_filename = f"converted_{input_path.stem}.mp4"
        output_path = tmp_dir / output_filename
        
        # Docker –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º jrottenberg/ffmpeg
        docker_cmd = [
            "docker", "run", "--rm",
            "--gpus", "all",
            "-v", f"{tmp_dir.absolute()}:/workdir",
            "-w", "/workdir",
            "jrottenberg/ffmpeg:5.1.4-nvidia2004",
            "-threads", "0",
            "-i", input_path.name,
            "-vf", "fps=10,format=yuv420p",
            "-c:v", "h264_nvenc",
            "-preset", "p7",
            "-cq", "26",
            "-s", "1920x1080",
            "-c:a", "aac",
            "-b:a", "64k",
            "-ac", "1",
            "-y", output_filename
        ]
        
        logger.info(f"Running Docker command: {' '.join(docker_cmd)}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            process = await asyncio.create_subprocess_exec(
                *docker_cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            try:
                stdout, stderr = await asyncio.wait_for(
                    process.communicate(),
                    timeout=CONVERSION_TIMEOUT
                )
            except asyncio.TimeoutError:
                process.kill()
                await process.wait()
                raise Exception(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ª–∏–º–∏—Ç: {CONVERSION_TIMEOUT} —Å–µ–∫—É–Ω–¥)")
            
            if process.returncode != 0:
                raise Exception(f"Docker command failed: {stderr.decode()}")
            
            if not output_path.exists():
                raise Exception("Output file was not created")
            
            logger.info(f"Video converted successfully: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"Docker conversion error: {e}", exc_info=True)
            raise
    
    async def _send_converted_video(self, message, video_path: Path, processing_msg):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await self.bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            with open(video_path, 'rb') as video_file:
                await self.bot.send_video(
                    message.chat.id,
                    video=video_file,
                    caption="‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!\n\n"
                           "üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                           "‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1920x1080\n"
                           "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤: 10 FPS\n"
                           "‚Ä¢ –ö–æ–¥–µ–∫: H.264 (NVENC)\n"
                           "‚Ä¢ –ê—É–¥–∏–æ: AAC, 64kbps"
                )
            
            logger.info(f"Sent converted video: {video_path}")
            
        except Exception as e:
            logger.error(f"Error sending video: {e}", exc_info=True)
            await self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
    
    async def _cleanup_temp_files(self, tmp_dir: Path):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            import shutil
            if tmp_dir.exists():
                shutil.rmtree(tmp_dir)
                logger.info(f"Cleaned up temp directory: {tmp_dir}")
        except Exception as e:
            logger.error(f"Error cleaning up temp files: {e}", exc_info=True)
    
    async def _init_telethon(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telethon –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.telethon_client:
            return False
            
        try:
            # AICODE-NOTE: –ó–∞–ø—É—Å–∫–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await self.telethon_client.start(
                phone=TELEGRAM_PHONE,
                code_callback=self._telegram_code_callback,
                password=self._telegram_password_callback
            )
            logger.info("Telethon client started successfully")
            return True
        except KeyboardInterrupt:
            logger.warning("Telethon authorization cancelled by user")
            return False
        except Exception as e:
            logger.error(f"Failed to start Telethon client: {e}")
            # AICODE-NOTE: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if "phone number invalid" in str(e).lower():
                logger.error("Invalid phone number format. Please check TELEGRAM_PHONE environment variable.")
            elif "api_id" in str(e).lower() or "api_hash" in str(e).lower():
                logger.error("Invalid API credentials. Please check TELEGRAM_API_ID and TELEGRAM_API_HASH environment variables.")
            elif "flood" in str(e).lower():
                logger.error("Too many requests. Please wait before trying again.")
            return False
    
    def _telegram_code_callback(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç Telegram"""
        print(f"\nüîê Telegram –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä {TELEGRAM_PHONE}")
        print("üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        
        while True:
            try:
                code = input("–ö–æ–¥: ").strip()
                if code and code.isdigit() and len(code) >= 4:
                    logger.info(f"Code entered: {code}")
                    return code
                else:
                    print("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)")
            except KeyboardInterrupt:
                print("\n‚ùå –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                raise
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
    
    def _telegram_password_callback(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("\nüîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        
        while True:
            try:
                password = input("–ü–∞—Ä–æ–ª—å: ").strip()
                if password:
                    logger.info("Password entered")
                    return password
                else:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            except KeyboardInterrupt:
                print("\n‚ùå –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                raise
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
    
    async def _download_file_telethon(self, document, tmp_dir: Path) -> Path:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telethon (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã)"""
        if not self.telethon_client:
            raise Exception("Telethon client not available")
        
        # AICODE-NOTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telethon –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if not self.telethon_client.is_connected():
            logger.warning("Telethon client not connected, attempting to reconnect...")
            if not await self._init_telethon():
                raise Exception("Failed to initialize Telethon client")
        
        file_path = tmp_dir / document.file_name
        file_size = document.file_size or 0
        
        logger.info(f"Downloading large file via Telethon: {document.file_name} ({file_size / MB:.1f} MB)")
        
        try:
            # AICODE-NOTE: –ò—Å–ø–æ–ª—å–∑—É–µ–º Telethon –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            async with self.telethon_client:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ file_id
                message = await self.telethon_client.get_messages(
                    entity='me',  # –ò–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
                    ids=document.file_id
                )
                
                if not message or not message.document:
                    raise Exception("File not found via Telethon")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                downloaded_size = 0
                async for chunk in self.telethon_client.iter_download(message.document, file=file_path):
                    downloaded_size += len(chunk)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ú–ë
                    if downloaded_size % (10 * MB) == 0 or downloaded_size == file_size:
                        progress_percent = (downloaded_size / file_size * 100) if file_size > 0 else 0
                        logger.info(f"Telethon download progress: {downloaded_size / MB:.1f} MB / {file_size / MB:.1f} MB ({progress_percent:.1f}%)")
        
        except FileTooBigError:
            raise Exception("File is too big even for Telethon (over 2GB)")
        except FloodWaitError as e:
            raise Exception(f"Rate limited by Telegram, try again in {e.seconds} seconds")
        except Exception as e:
            raise Exception(f"Telethon download failed: {str(e)}")
        
        logger.info(f"Successfully downloaded large file via Telethon: {file_path}")
        return file_path

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("Starting Telegram Bot...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if USE_TELETHON:
            await self._init_telethon()
        
        await self.bot.polling(none_stop=True)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = VideoConverterBot()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot error: {e}", exc_info=True)

if __name__ == "__main__":
    asyncio.run(main())